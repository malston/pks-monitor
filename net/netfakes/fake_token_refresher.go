// Code generated by counterfeiter. DO NOT EDIT.
package netfakes

import (
	"pks-cli/net"
	"sync"
)

type FakeTokenRefresher struct {
	RefreshTokenGrantStub        func(string, string, string) (string, string, error)
	refreshTokenGrantMutex       sync.RWMutex
	refreshTokenGrantArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	refreshTokenGrantReturns struct {
		result1 string
		result2 string
		result3 error
	}
	refreshTokenGrantReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenRefresher) RefreshTokenGrant(arg1 string, arg2 string, arg3 string) (string, string, error) {
	fake.refreshTokenGrantMutex.Lock()
	ret, specificReturn := fake.refreshTokenGrantReturnsOnCall[len(fake.refreshTokenGrantArgsForCall)]
	fake.refreshTokenGrantArgsForCall = append(fake.refreshTokenGrantArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RefreshTokenGrant", []interface{}{arg1, arg2, arg3})
	fake.refreshTokenGrantMutex.Unlock()
	if fake.RefreshTokenGrantStub != nil {
		return fake.RefreshTokenGrantStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.refreshTokenGrantReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeTokenRefresher) RefreshTokenGrantCallCount() int {
	fake.refreshTokenGrantMutex.RLock()
	defer fake.refreshTokenGrantMutex.RUnlock()
	return len(fake.refreshTokenGrantArgsForCall)
}

func (fake *FakeTokenRefresher) RefreshTokenGrantCalls(stub func(string, string, string) (string, string, error)) {
	fake.refreshTokenGrantMutex.Lock()
	defer fake.refreshTokenGrantMutex.Unlock()
	fake.RefreshTokenGrantStub = stub
}

func (fake *FakeTokenRefresher) RefreshTokenGrantArgsForCall(i int) (string, string, string) {
	fake.refreshTokenGrantMutex.RLock()
	defer fake.refreshTokenGrantMutex.RUnlock()
	argsForCall := fake.refreshTokenGrantArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTokenRefresher) RefreshTokenGrantReturns(result1 string, result2 string, result3 error) {
	fake.refreshTokenGrantMutex.Lock()
	defer fake.refreshTokenGrantMutex.Unlock()
	fake.RefreshTokenGrantStub = nil
	fake.refreshTokenGrantReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTokenRefresher) RefreshTokenGrantReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.refreshTokenGrantMutex.Lock()
	defer fake.refreshTokenGrantMutex.Unlock()
	fake.RefreshTokenGrantStub = nil
	if fake.refreshTokenGrantReturnsOnCall == nil {
		fake.refreshTokenGrantReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.refreshTokenGrantReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTokenRefresher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.refreshTokenGrantMutex.RLock()
	defer fake.refreshTokenGrantMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenRefresher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ net.TokenRefresher = new(FakeTokenRefresher)
