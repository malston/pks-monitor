// Code generated by counterfeiter. DO NOT EDIT.
package netfakes

import (
	"sync"

	"github.com/pupimvictor/pks-monitor/net"
)

type FakeTokenStore struct {
	GetAccessTokenStub        func() string
	getAccessTokenMutex       sync.RWMutex
	getAccessTokenArgsForCall []struct {
	}
	getAccessTokenReturns struct {
		result1 string
	}
	getAccessTokenReturnsOnCall map[int]struct {
		result1 string
	}
	SetAccessTokenStub        func(string)
	setAccessTokenMutex       sync.RWMutex
	setAccessTokenArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenStore) GetAccessToken() string {
	fake.getAccessTokenMutex.Lock()
	ret, specificReturn := fake.getAccessTokenReturnsOnCall[len(fake.getAccessTokenArgsForCall)]
	fake.getAccessTokenArgsForCall = append(fake.getAccessTokenArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAccessToken", []interface{}{})
	fake.getAccessTokenMutex.Unlock()
	if fake.GetAccessTokenStub != nil {
		return fake.GetAccessTokenStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getAccessTokenReturns
	return fakeReturns.result1
}

func (fake *FakeTokenStore) GetAccessTokenCallCount() int {
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	return len(fake.getAccessTokenArgsForCall)
}

func (fake *FakeTokenStore) GetAccessTokenCalls(stub func() string) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = stub
}

func (fake *FakeTokenStore) GetAccessTokenReturns(result1 string) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = nil
	fake.getAccessTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTokenStore) GetAccessTokenReturnsOnCall(i int, result1 string) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = nil
	if fake.getAccessTokenReturnsOnCall == nil {
		fake.getAccessTokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAccessTokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTokenStore) SetAccessToken(arg1 string) {
	fake.setAccessTokenMutex.Lock()
	fake.setAccessTokenArgsForCall = append(fake.setAccessTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetAccessToken", []interface{}{arg1})
	fake.setAccessTokenMutex.Unlock()
	if fake.SetAccessTokenStub != nil {
		fake.SetAccessTokenStub(arg1)
	}
}

func (fake *FakeTokenStore) SetAccessTokenCallCount() int {
	fake.setAccessTokenMutex.RLock()
	defer fake.setAccessTokenMutex.RUnlock()
	return len(fake.setAccessTokenArgsForCall)
}

func (fake *FakeTokenStore) SetAccessTokenCalls(stub func(string)) {
	fake.setAccessTokenMutex.Lock()
	defer fake.setAccessTokenMutex.Unlock()
	fake.SetAccessTokenStub = stub
}

func (fake *FakeTokenStore) SetAccessTokenArgsForCall(i int) string {
	fake.setAccessTokenMutex.RLock()
	defer fake.setAccessTokenMutex.RUnlock()
	argsForCall := fake.setAccessTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	fake.setAccessTokenMutex.RLock()
	defer fake.setAccessTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ net.TokenStore = new(FakeTokenStore)
